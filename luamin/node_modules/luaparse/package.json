{
  "name": "luaparse",
  "description": "A Lua parser in JavaScript",
  "version": "0.1.6",
  "homepage": "http://oxyc.github.io/luaparse/",
  "bugs": {
    "url": "https://github.com/oxyc/luaparse/issues"
  },
  "author": {
    "name": "Oskar Schöldström",
    "email": "public@oxy.fi"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/oxyc/luaparse.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/oxyc/luaparse/blob/master/LICENSE"
    }
  ],
  "main": "luaparse.js",
  "bin": {
    "luaparse": "bin/luaparse"
  },
  "man": [
    "docs/luaparse.1"
  ],
  "scripts": {
    "test": "make qa"
  },
  "keywords": [
    "lua",
    "parser",
    "parsing"
  ],
  "devDependencies": {
    "benchmark": "~1.0.0",
    "complexity-report": "~0.10.5",
    "docco": "~0.6.3",
    "grunt": "~0.4.4",
    "grunt-contrib-concat": "~0.4.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-lint-bash": "~0.1.0",
    "grunt-lint-inline": "~0.4.0",
    "istanbul": "~0.2.7",
    "marked": "~0.3.2",
    "spec": "git://github.com/kitcambridge/spec.git#gh-pages",
    "testem": "~0.6.9"
  },
  "readme": "# luaparse [![Build Status](https://travis-ci.org/oxyc/luaparse.png)](https://travis-ci.org/oxyc/luaparse)\n\nA Lua parser written in JavaScript, for my bachelor's thesis at Arcada.\n\n## Installation\n\nInstall through `bower install luaparse` or `npm install luaparse`.\n\n## Usage\n\nCommonJS\n\n```js\nvar parser = require('luaparse');\nvar ast = parser.parse('i = 0');\nconsole.log(JSON.stringify(ast));\n```\n\nAMD\n\n```js\nrequire(['luaparse'], function(parser) {\n  var ast = parser.parse('i = 0');\n  console.log(JSON.stringify(ast));\n});\n```\n\nBrowser\n\n```html\n<script src=\"luaparse.js\"></script>\n<script>\nvar ast = luaparse.parse('i = 0');\nconsole.log(JSON.stringify(ast));\n</script>\n```\n\n## Parser Interface\n\nBasic usage:\n\n```js\nluaparse.parse(code, options);\n```\n\nThe output of the parser is an Abstract Syntax Tree (AST) formatted in JSON.\n\nThe available options are:\n\n- `wait: false` Explicitly tell the parser when the input ends.\n- `comments: true` Store comments as an array in the chunk object.\n- `scope: false` Track identifier scopes.\n- `locations: false` Store location information on each syntax node.\n- `ranges: false` Store the start and end character locations on each syntax\n  node.\n\nThe default options are also exposed through `luaparse.defaultOptions` where\nthey can be overriden globally.\n\nThere is a second interface which might be preferable when using the `wait`\noption.\n\n```js\nvar parser = luaparse.parse({ wait: true });\nparser.write('foo = \"');\nparser.write('bar');\nvar ast = parser.end('\"');\n```\n\nThis would be identical to:\n\n```js\nvar ast = luaparse.parse('foo = \"bar\"');\n```\n\n### AST format\n\nIf the following code is executed:\n\n```js\nluaparse.parse('foo = \"bar\"');\n```\n\nthen the returned value will be:\n\n```js\n{\n  \"type\": \"Chunk\",\n  \"body\": [\n    {\n      \"type\": \"AssignmentStatement\",\n      \"variables\": [\n        {\n          \"type\": \"Identifier\",\n          \"name\": \"foo\"\n        }\n      ],\n      \"init\": [\n        {\n          \"type\": \"StringLiteral\",\n          \"value\": \"bar\",\n          \"raw\": \"\\\"bar\\\"\"\n        }\n      ]\n    }\n  ],\n  \"comments\": []\n}\n```\n\n### Custom AST\n\nThe default AST structure is somewhat inspired by the Mozilla Parser API but\ncan easily be overriden to customize the structure or to inject custom logic.\n\n`luaparse.ast` is an object containing all functions used to create the AST, if\nyou for example wanted to trigger an event on node creations you could use the\nfollowing:\n\n```js\nvar luaparse = require('luaparse'),\n    events = new (require('events').EventEmitter);\n\nObject.keys(luaparse.ast).forEach(function(type) {\n  var original = luaparse.ast[type];\n  luaparse.ast[type] = function() {\n    var node = original.apply(null, arguments);\n    events.emit(node.type, node);\n    return node;\n  };\n});\nevents.on('Identifier', function(node) { console.log(node); });\nluaparse.parse('i = \"foo\"');\n```\n\n### Lexer\n\nThe lexer used by luaparse can be used independently of the recursive descent\nparser. The lex function is exposed as `luaparse.lex()` and it will return the\nnext token up until `EOF` is reached.\n\nEach token consists of:\n\n- `type` expressed as an enum flag which can be matched with `luaparse.tokenTypes`.\n- `value`\n- `line`, `lineStart`\n- `range` can be used to slice out raw values, eg. `foo = \"bar\"` will return a\n`StringLiteral` token with the value `bar`. Slicing out the range on the other\nhand will return `\"bar\"`.\n\n```js\nvar parser = luaparse.parse('foo = \"bar\"');\nparser.lex(); // { type: 8, value: \"foo\", line: 1, lineStart: 0, range: [0, 3] }\nparser.lex(); // { type: 32, value: \"=\", line: 1, lineStart: 0, range: [4, 5]}\nparser.lex(); // { type: 2, value: \"bar\", line: 1, lineStart: 0, range: [6, 11] }\nparser.lex(); // { type: 1, value: \"<eof>\", line: 1, lineStart: 0, range: [11 11] }\nparser.lex(); // { type: 1, value: \"<eof>\", line: 1, lineStart: 0, range: [11 11] }\n```\n\n## Examples\n\nHave a look in the [examples directory](https://github.com/oxyc/luaparse/tree/master/examples)\nof the repository for some code examples or check them out [live](http://oxyc.github.io/luaparse/examples.html).\n\n## luaparse(1)\n\nThe `luaparse` executable can be used in your shell by installing `luaparse` globally using npm:\n\n```bash\n$ npm install -g luaparse\n$ luaparse --help\n\nUsage: luaparse [option]... [file|code]...\n\nOptions:\n  -c|--code [code]   parse code snippet\n  -f|--file [file]   parse from file\n  -b|--beautify      output an indenteted AST\n  --[no]-comments    store comments. defaults to true\n  --[no]-scope       store variable scope. defaults to false\n  --[no]-locations   store location data on syntax nodes. defaults to false\n  --[no]-ranges      store start and end character locations. defaults to false\n  -q|--quiet         suppress output\n  -h|--help\n  -v|--version\n  --verbose\n\nExamples:\n  luaparse --no-comments -c \"locale foo = \\\"bar\\\"\"\n  luaparse foo.lua bar.lua\n```\n\nExample usage\n\n```bash\n$ luaparse \"i = 0\"\n\n{\"type\":\"Chunk\",\"body\":[{\"type\":\"AssignmentStatement\",\"variables\":[{\"type\":\"Identifier\",\"name\":\"i\"}],\"init\":[{\"type\":\"NumericLiteral\",\"value\":0,\"raw\":\"0\"}]}],\"comments\":[]}\n```\n\n## Support\n\nHas been tested in at least IE6+, Firefox 3+, Safari 4+, Chrome 10+, Opera 10+,\nNode 0.4.0+, RingoJS 0.8-0.9, Narwhal 0.3.2, Rhino 1.7R4-1.7R5, Nashorn 1.8.0.\n\n## Quality Assurance\n\n_TL;DR simply run `make qa`. This will run all quality assurance scripts but\nassumes you have it set up correctly._\n\nBegin by cloning the repository and installing the development dependencies\nwith `npm install`. To test AMD loading for browsers you should run `bower\ninstall` which will download RequireJS.\n\nThe luaparse test suite uses [testem](https://github.com/airportyh/testem) as a\ntest runner, and because of this it's very easy to run the tests using\ndifferent javascript engines or even on locally installed browsers. Currently\nthe default runner uses [PhantomJS](http://phantomjs.org/) and node so when\nusing `make test` or `npm test` you should have PhantomJS installed.\n\n### Test runners\n\n- `make test` uses PhantomJS and node.\n- `make testem-engines` uses PhantomJS, node, narwhal, ringo, rhino and rhino\n1.7R5. This requires that you have the engines installed.\n- `make test-node` uses a custom command line reporter to make the output\neasier on the eyes while practicing TDD.\n- By installing `testem` globally you can also run the tests in a locally\ninstalled browser.\n\n### Other quality assurance measures\n\n- You can check the function complexity using [complexity-report](https://github.com/philbooth/complexityReport.js)\nusing `make complexity-analysis`\n- Running `make coverage` will generate the [coverage report](http://oxyc.github.io/luaparse/coverage.html).\nTo simply check that all code has coverage you can run `make coverage-analysis`.\n- `make lint`, `make benchmark`, `make profile`.\n\n### Documentation\n\nBy running `make docs` all [documentation](http://oxyc.github.io/luaparse/)\nwill be generated.\n\n## Projects using luaparse\n\n- [luamin](http://mths.be/luamin), a Lua minifier written by Mathias Bynens.\n- [Ace](https://github.com/ajaxorg/ace), an online code editor.\n\n## Acknowledgements\n\n* Initial tests are scaffolded from [yueliang][yueliang] and then manually checked for error.\n* Much of the code is based on [LuaMinify][luaminify], the [Lua][lua] source and [Esprima][esprima]. All awesome projects.\n\n## License\n\nMIT\n\n[luaminify]: https://github.com/stravant/LuaMinify\n[yueliang]: http://yueliang.luaforge.net/\n[lua]: http://www.lua.org\n[esprima]: http://esprima.org\n",
  "readmeFilename": "README.md",
  "_id": "luaparse@0.1.6",
  "_shasum": "1e03f31e7106cf23eb73610369b6123f89baa85b",
  "_from": "luaparse@~0.1.4",
  "_resolved": "https://registry.npmjs.org/luaparse/-/luaparse-0.1.6.tgz"
}
