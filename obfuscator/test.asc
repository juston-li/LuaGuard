{
  "type": "Chunk",
  "body": [
    {
      "type": "FunctionDeclaration",
      "identifier": {
        "type": "Identifier",
        "name": "lookupify"
      },
      "isLocal": true,
      "parameters": [
        {
          "type": "Identifier",
          "name": "tb"
        }
      ],
      "body": [
        {
          "type": "ForGenericStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "_"
            },
            {
              "type": "Identifier",
              "name": "v"
            }
          ],
          "iterators": [
            {
              "type": "CallExpression",
              "base": {
                "type": "Identifier",
                "name": "pairs"
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "tb"
                }
              ]
            }
          ],
          "body": [
            {
              "type": "AssignmentStatement",
              "variables": [
                {
                  "type": "IndexExpression",
                  "base": {
                    "type": "Identifier",
                    "name": "tb"
                  },
                  "index": {
                    "type": "Identifier",
                    "name": "v"
                  }
                }
              ],
              "init": [
                {
                  "type": "BooleanLiteral",
                  "value": true,
                  "raw": "true"
                }
              ]
            }
          ]
        },
        {
          "type": "ReturnStatement",
          "arguments": [
            {
              "type": "Identifier",
              "name": "tb"
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "identifier": {
        "type": "Identifier",
        "name": "CountTable"
      },
      "isLocal": true,
      "parameters": [
        {
          "type": "Identifier",
          "name": "tb"
        }
      ],
      "body": [
        {
          "type": "LocalStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "c"
            }
          ],
          "init": [
            {
              "type": "NumericLiteral",
              "value": 0,
              "raw": "0"
            }
          ]
        },
        {
          "type": "ForGenericStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "_"
            }
          ],
          "iterators": [
            {
              "type": "CallExpression",
              "base": {
                "type": "Identifier",
                "name": "pairs"
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "tb"
                }
              ]
            }
          ],
          "body": [
            {
              "type": "AssignmentStatement",
              "variables": [
                {
                  "type": "Identifier",
                  "name": "c"
                }
              ],
              "init": [
                {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "c"
                  },
                  "right": {
                    "type": "NumericLiteral",
                    "value": 1,
                    "raw": "1"
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "ReturnStatement",
          "arguments": [
            {
              "type": "Identifier",
              "name": "c"
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "identifier": {
        "type": "Identifier",
        "name": "PrintTable"
      },
      "isLocal": true,
      "parameters": [
        {
          "type": "Identifier",
          "name": "tb"
        },
        {
          "type": "Identifier",
          "name": "atIndent"
        }
      ],
      "body": [
        {
          "type": "IfStatement",
          "clauses": [
            {
              "type": "IfClause",
              "condition": {
                "type": "MemberExpression",
                "indexer": ".",
                "identifier": {
                  "type": "Identifier",
                  "name": "Print"
                },
                "base": {
                  "type": "Identifier",
                  "name": "tb"
                }
              },
              "body": [
                {
                  "type": "ReturnStatement",
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "base": {
                        "type": "MemberExpression",
                        "indexer": ".",
                        "identifier": {
                          "type": "Identifier",
                          "name": "Print"
                        },
                        "base": {
                          "type": "Identifier",
                          "name": "tb"
                        }
                      },
                      "arguments": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "AssignmentStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "atIndent"
            }
          ],
          "init": [
            {
              "type": "LogicalExpression",
              "operator": "or",
              "left": {
                "type": "Identifier",
                "name": "atIndent"
              },
              "right": {
                "type": "NumericLiteral",
                "value": 0,
                "raw": "0"
              }
            }
          ]
        },
        {
          "type": "LocalStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "useNewlines"
            }
          ],
          "init": [
            {
              "type": "BinaryExpression",
              "operator": ">",
              "left": {
                "type": "CallExpression",
                "base": {
                  "type": "Identifier",
                  "name": "CountTable"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "tb"
                  }
                ]
              },
              "right": {
                "type": "NumericLiteral",
                "value": 1,
                "raw": "1"
              }
            }
          ]
        },
        {
          "type": "LocalStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "baseIndent"
            }
          ],
          "init": [
            {
              "type": "CallExpression",
              "base": {
                "type": "MemberExpression",
                "indexer": ".",
                "identifier": {
                  "type": "Identifier",
                  "name": "rep"
                },
                "base": {
                  "type": "Identifier",
                  "name": "string"
                }
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "value": "    ",
                  "raw": "'    '"
                },
                {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "atIndent"
                  },
                  "right": {
                    "type": "NumericLiteral",
                    "value": 1,
                    "raw": "1"
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "LocalStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "out"
            }
          ],
          "init": [
            {
              "type": "BinaryExpression",
              "operator": "..",
              "left": {
                "type": "StringLiteral",
                "value": "{",
                "raw": "\"{\""
              },
              "right": {
                "type": "LogicalExpression",
                "operator": "or",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "and",
                  "left": {
                    "type": "Identifier",
                    "name": "useNewlines"
                  },
                  "right": {
                    "type": "StringLiteral",
                    "value": "\n",
                    "raw": "'\\n'"
                  }
                },
                "right": {
                  "type": "StringLiteral",
                  "value": "",
                  "raw": "''"
                }
              }
            }
          ]
        },
        {
          "type": "ForGenericStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "k"
            },
            {
              "type": "Identifier",
              "name": "v"
            }
          ],
          "iterators": [
            {
              "type": "CallExpression",
              "base": {
                "type": "Identifier",
                "name": "pairs"
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "tb"
                }
              ]
            }
          ],
          "body": [
            {
              "type": "IfStatement",
              "clauses": [
                {
                  "type": "IfClause",
                  "condition": {
                    "type": "BinaryExpression",
                    "operator": "~=",
                    "left": {
                      "type": "CallExpression",
                      "base": {
                        "type": "Identifier",
                        "name": "type"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "v"
                        }
                      ]
                    },
                    "right": {
                      "type": "StringLiteral",
                      "value": "function",
                      "raw": "'function'"
                    }
                  },
                  "body": [
                    {
                      "type": "AssignmentStatement",
                      "variables": [
                        {
                          "type": "Identifier",
                          "name": "out"
                        }
                      ],
                      "init": [
                        {
                          "type": "BinaryExpression",
                          "operator": "..",
                          "left": {
                            "type": "Identifier",
                            "name": "out"
                          },
                          "right": {
                            "type": "LogicalExpression",
                            "operator": "or",
                            "left": {
                              "type": "LogicalExpression",
                              "operator": "and",
                              "left": {
                                "type": "Identifier",
                                "name": "useNewlines"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "baseIndent"
                              }
                            },
                            "right": {
                              "type": "StringLiteral",
                              "value": "",
                              "raw": "''"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "clauses": [
                        {
                          "type": "IfClause",
                          "condition": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "CallExpression",
                              "base": {
                                "type": "Identifier",
                                "name": "type"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "k"
                                }
                              ]
                            },
                            "right": {
                              "type": "StringLiteral",
                              "value": "number",
                              "raw": "'number'"
                            }
                          },
                          "body": []
                        },
                        {
                          "type": "ElseifClause",
                          "condition": {
                            "type": "LogicalExpression",
                            "operator": "and",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "CallExpression",
                                "base": {
                                  "type": "Identifier",
                                  "name": "type"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "k"
                                  }
                                ]
                              },
                              "right": {
                                "type": "StringLiteral",
                                "value": "string",
                                "raw": "'string'"
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "base": {
                                "type": "MemberExpression",
                                "indexer": ":",
                                "identifier": {
                                  "type": "Identifier",
                                  "name": "match"
                                },
                                "base": {
                                  "type": "Identifier",
                                  "name": "k"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "StringLiteral",
                                  "value": "^[A-Za-z_][A-Za-z0-9_]*$",
                                  "raw": "\"^[A-Za-z_][A-Za-z0-9_]*$\""
                                }
                              ]
                            }
                          },
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "..",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "k"
                                    },
                                    "right": {
                                      "type": "StringLiteral",
                                      "value": " = ",
                                      "raw": "\" = \""
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ElseifClause",
                          "condition": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "CallExpression",
                              "base": {
                                "type": "Identifier",
                                "name": "type"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "k"
                                }
                              ]
                            },
                            "right": {
                              "type": "StringLiteral",
                              "value": "string",
                              "raw": "'string'"
                            }
                          },
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "..",
                                    "left": {
                                      "type": "StringLiteral",
                                      "value": "[\"",
                                      "raw": "\"[\\\"\""
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "..",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "k"
                                      },
                                      "right": {
                                        "type": "StringLiteral",
                                        "value": "\"] = ",
                                        "raw": "\"\\\"] = \""
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ElseClause",
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "..",
                                    "left": {
                                      "type": "StringLiteral",
                                      "value": "[",
                                      "raw": "\"[\""
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "..",
                                      "left": {
                                        "type": "CallExpression",
                                        "base": {
                                          "type": "Identifier",
                                          "name": "tostring"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "k"
                                          }
                                        ]
                                      },
                                      "right": {
                                        "type": "StringLiteral",
                                        "value": "] = ",
                                        "raw": "\"] = \""
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "clauses": [
                        {
                          "type": "IfClause",
                          "condition": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "CallExpression",
                              "base": {
                                "type": "Identifier",
                                "name": "type"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "v"
                                }
                              ]
                            },
                            "right": {
                              "type": "StringLiteral",
                              "value": "string",
                              "raw": "'string'"
                            }
                          },
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "..",
                                    "left": {
                                      "type": "StringLiteral",
                                      "value": "\"",
                                      "raw": "\"\\\"\""
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "..",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "v"
                                      },
                                      "right": {
                                        "type": "StringLiteral",
                                        "value": "\"",
                                        "raw": "\"\\\"\""
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ElseifClause",
                          "condition": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "CallExpression",
                              "base": {
                                "type": "Identifier",
                                "name": "type"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "v"
                                }
                              ]
                            },
                            "right": {
                              "type": "StringLiteral",
                              "value": "number",
                              "raw": "'number'"
                            }
                          },
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "v"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ElseifClause",
                          "condition": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "CallExpression",
                              "base": {
                                "type": "Identifier",
                                "name": "type"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "v"
                                }
                              ]
                            },
                            "right": {
                              "type": "StringLiteral",
                              "value": "table",
                              "raw": "'table'"
                            }
                          },
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "base": {
                                      "type": "Identifier",
                                      "name": "PrintTable"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "v"
                                      },
                                      {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "atIndent"
                                        },
                                        "right": {
                                          "type": "LogicalExpression",
                                          "operator": "or",
                                          "left": {
                                            "type": "LogicalExpression",
                                            "operator": "and",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "useNewlines"
                                            },
                                            "right": {
                                              "type": "NumericLiteral",
                                              "value": 1,
                                              "raw": "1"
                                            }
                                          },
                                          "right": {
                                            "type": "NumericLiteral",
                                            "value": 0,
                                            "raw": "0"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "ElseClause",
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "base": {
                                      "type": "Identifier",
                                      "name": "tostring"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "v"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "clauses": [
                        {
                          "type": "IfClause",
                          "condition": {
                            "type": "CallExpression",
                            "base": {
                              "type": "Identifier",
                              "name": "next"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "tb"
                              },
                              {
                                "type": "Identifier",
                                "name": "k"
                              }
                            ]
                          },
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "StringLiteral",
                                    "value": ",",
                                    "raw": "\",\""
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "IfStatement",
                      "clauses": [
                        {
                          "type": "IfClause",
                          "condition": {
                            "type": "Identifier",
                            "name": "useNewlines"
                          },
                          "body": [
                            {
                              "type": "AssignmentStatement",
                              "variables": [
                                {
                                  "type": "Identifier",
                                  "name": "out"
                                }
                              ],
                              "init": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "..",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "out"
                                  },
                                  "right": {
                                    "type": "StringLiteral",
                                    "value": "\n",
                                    "raw": "'\\n'"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "AssignmentStatement",
          "variables": [
            {
              "type": "Identifier",
              "name": "out"
            }
          ],
          "init": [
            {
              "type": "BinaryExpression",
              "operator": "..",
              "left": {
                "type": "Identifier",
                "name": "out"
              },
              "right": {
                "type": "BinaryExpression",
                "operator": "..",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "or",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "and",
                    "left": {
                      "type": "Identifier",
                      "name": "useNewlines"
                    },
                    "right": {
                      "type": "CallExpression",
                      "base": {
                        "type": "MemberExpression",
                        "indexer": ".",
                        "identifier": {
                          "type": "Identifier",
                          "name": "rep"
                        },
                        "base": {
                          "type": "Identifier",
                          "name": "string"
                        }
                      },
                      "arguments": [
                        {
                          "type": "StringLiteral",
                          "value": "    ",
                          "raw": "'    '"
                        },
                        {
                          "type": "Identifier",
                          "name": "atIndent"
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "StringLiteral",
                    "value": "",
                    "raw": "''"
                  }
                },
                "right": {
                  "type": "StringLiteral",
                  "value": "}",
                  "raw": "\"}\""
                }
              }
            }
          ]
        },
        {
          "type": "ReturnStatement",
          "arguments": [
            {
              "type": "Identifier",
              "name": "out"
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "identifier": {
        "type": "Identifier",
        "name": "splitLines"
      },
      "isLocal": true,
      "parameters": [
        {
          "type": "Identifier",
          "name": "str"
        }
      ],
      "body": [
        {
          "type": "IfStatement",
          "clauses": [
            {
              "type": "IfClause",
              "condition": {
                "type": "CallExpression",
                "base": {
                  "type": "MemberExpression",
                  "indexer": ":",
                  "identifier": {
                    "type": "Identifier",
                    "name": "match"
                  },
                  "base": {
                    "type": "Identifier",
                    "name": "str"
                  }
                },
                "arguments": [
                  {
                    "type": "StringLiteral",
                    "value": "\n",
                    "raw": "\"\\n\""
                  }
                ]
              },
              "body": [
                {
                  "type": "LocalStatement",
                  "variables": [
                    {
                      "type": "Identifier",
                      "name": "lines"
                    }
                  ],
                  "init": [
                    {
                      "type": "TableConstructorExpression",
                      "fields": []
                    }
                  ]
                },
                {
                  "type": "ForGenericStatement",
                  "variables": [
                    {
                      "type": "Identifier",
                      "name": "line"
                    }
                  ],
                  "iterators": [
                    {
                      "type": "CallExpression",
                      "base": {
                        "type": "MemberExpression",
                        "indexer": ":",
                        "identifier": {
                          "type": "Identifier",
                          "name": "gmatch"
                        },
                        "base": {
                          "type": "Identifier",
                          "name": "str"
                        }
                      },
                      "arguments": [
                        {
                          "type": "StringLiteral",
                          "value": "[^\n]*",
                          "raw": "\"[^\\n]*\""
                        }
                      ]
                    }
                  ],
                  "body": [
                    {
                      "type": "CallStatement",
                      "expression": {
                        "type": "CallExpression",
                        "base": {
                          "type": "MemberExpression",
                          "indexer": ".",
                          "identifier": {
                            "type": "Identifier",
                            "name": "insert"
                          },
                          "base": {
                            "type": "Identifier",
                            "name": "table"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "lines"
                          },
                          {
                            "type": "Identifier",
                            "name": "line"
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "type": "CallStatement",
                  "expression": {
                    "type": "CallExpression",
                    "base": {
                      "type": "Identifier",
                      "name": "assert"
                    },
                    "arguments": [
                      {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "#",
                          "argument": {
                            "type": "Identifier",
                            "name": "lines"
                          }
                        },
                        "right": {
                          "type": "NumericLiteral",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "ReturnStatement",
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "lines"
                    }
                  ]
                }
              ]
            },
            {
              "type": "ElseClause",
              "body": [
                {
                  "type": "ReturnStatement",
                  "arguments": [
                    {
                      "type": "TableConstructorExpression",
                      "fields": [
                        {
                          "type": "TableValue",
                          "value": {
                            "type": "Identifier",
                            "name": "str"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "identifier": {
        "type": "Identifier",
        "name": "printf"
      },
      "isLocal": true,
      "parameters": [
        {
          "type": "Identifier",
          "name": "fmt"
        },
        {
          "type": "VarargLiteral",
          "value": "...",
          "raw": "..."
        }
      ],
      "body": [
        {
          "type": "ReturnStatement",
          "arguments": [
            {
              "type": "CallExpression",
              "base": {
                "type": "Identifier",
                "name": "print"
              },
              "arguments": [
                {
                  "type": "CallExpression",
                  "base": {
                    "type": "MemberExpression",
                    "indexer": ".",
                    "identifier": {
                      "type": "Identifier",
                      "name": "format"
                    },
                    "base": {
                      "type": "Identifier",
                      "name": "string"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "fmt"
                    },
                    {
                      "type": "VarargLiteral",
                      "value": "...",
                      "raw": "..."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "ReturnStatement",
      "arguments": [
        {
          "type": "TableConstructorExpression",
          "fields": [
            {
              "type": "TableKeyString",
              "key": {
                "type": "Identifier",
                "name": "PrintTable"
              },
              "value": {
                "type": "Identifier",
                "name": "PrintTable"
              }
            },
            {
              "type": "TableKeyString",
              "key": {
                "type": "Identifier",
                "name": "CountTable"
              },
              "value": {
                "type": "Identifier",
                "name": "CountTable"
              }
            },
            {
              "type": "TableKeyString",
              "key": {
                "type": "Identifier",
                "name": "lookupify"
              },
              "value": {
                "type": "Identifier",
                "name": "lookupify"
              }
            },
            {
              "type": "TableKeyString",
              "key": {
                "type": "Identifier",
                "name": "splitLines"
              },
              "value": {
                "type": "Identifier",
                "name": "splitLines"
              }
            },
            {
              "type": "TableKeyString",
              "key": {
                "type": "Identifier",
                "name": "printf"
              },
              "value": {
                "type": "Identifier",
                "name": "printf"
              }
            }
          ]
        }
      ]
    }
  ],
  "comments": [
    {
      "type": "Comment",
      "value": "",
      "raw": "--"
    },
    {
      "type": "Comment",
      "value": " Util.lua",
      "raw": "-- Util.lua"
    },
    {
      "type": "Comment",
      "value": "",
      "raw": "--"
    },
    {
      "type": "Comment",
      "value": " Provides some common utilities shared throughout the project.",
      "raw": "-- Provides some common utilities shared throughout the project."
    },
    {
      "type": "Comment",
      "value": "",
      "raw": "--"
    },
    {
      "type": "Comment",
      "value": "do",
      "raw": "--do"
    },
    {
      "type": "Comment",
      "value": "nothing to do",
      "raw": "--nothing to do"
    }
  ]
}